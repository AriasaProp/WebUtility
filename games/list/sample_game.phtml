<style type="text/css">
img {
  display: none;
}
</style>
<img id="foods" src="/img/foods/foods.png"/>
<script id="vertex-shader" type="x-shader/x-vertex">
precision mediump float;

uniform mat4 u_proj;
attribute vec4 a_position;
attribute vec2 a_texCoord;
attribute vec4 a_color;
varying vec4 v_color;
varying vec2 v_texCoord;
void main(void) {
  v_color = a_color;
  v_texCoord = a_texCoord;
  gl_Position = u_proj * a_position;
}
</script>
<script id="fragment-shader" type="x-shader/x-fragment">
precision mediump float;

uniform sampler2D u_texture;
varying vec4 v_color;
varying vec2 v_texCoord;
void main(void) {
  gl_FragColor = v_color * texture2D(u_texture, v_texCoord);
}
</script>

<script type="text/javascript" defer>
const canvas = document.getElementById("game-canvas");
const plog = document.getElementById("log");
try {
  const gl = 
    canvas.getContext('webgl2') || 
    canvas.getContext('webgl') || 
    canvas.getContext('experimental-webgl');
  if (!gl) throw "unsupport webgl";
  //vertices buffer
  const vertexPosition = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosition);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
    10.0, 10.0,
    240.0, 10.0, 
    10.0, 711.0, 
    240.0, 710.0, 

    250.0, 10.0, 
    960.0, 10.0, 
    250.0, 710.0, 
    960.0, 710.0, 

    970.0, 10.0, 
    1270.0, 10.0, 
    970.0, 710.0, 
    1270.0, 710.0, 
  ]), gl.STATIC_DRAW);
  const vertexCoord = gl.createBuffer();
  const patt = 32/160;
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoord);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
    0.0, 2*patt,
    patt, 2*patt,
    0.0, patt,
    patt, patt,
    
    0.0, patt,
    patt, patt,
    0.0, 0.0,
    patt, 0.0,
    
    0.0, 3*patt,
    patt,3*patt,
    0.0, 2*patt,
    patt, 2*patt,
  ]), gl.STATIC_DRAW);
  const vertexColor = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColor);
  gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array([
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff,
    0xff, 0, 0xff, 0xff
  ]), gl.STATIC_DRAW);
  //index buffer
  const indexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
    new Uint8Array([
      0, 1, 2, 2, 1, 3,
      4, 5, 6, 6, 5, 7,
      8, 9, 10, 10, 9, 11
    ]), gl.STATIC_DRAW);
  //shader Program
  const shaderProgram = gl.createProgram();
  const vertexShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vertexShader, document.getElementById("vertex-shader").textContent);
  gl.compileShader(vertexShader);
  if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))
    throw "vertex shader: " + gl.getShaderInfoLog(vertexShader);
  gl.attachShader(shaderProgram, vertexShader);
  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fragmentShader, document.getElementById("fragment-shader").textContent);
  gl.compileShader(fragmentShader);
  if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))
    throw "fragment shader: " +  gl.getShaderInfoLog(fragmentShader);
  gl.attachShader(shaderProgram, fragmentShader);
  gl.linkProgram(shaderProgram);
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
    throw "link shader program: " + gl.getProgramInfoLog(shaderProgram);
  gl.validateProgram(shaderProgram);
  if (!gl.getProgramParameter(shaderProgram, gl.VALIDATE_STATUS))
    throw "validate shader program: " + gl.getProgramInfoLog(shaderProgram);
  gl.deleteShader(vertexShader);
  gl.deleteShader(fragmentShader);
  gl.useProgram(shaderProgram);
  //create texture
  const img = document.getElementById("foods");
  const fruits = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, fruits);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, img);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
  gl.pixelStorei(gl.UNPACK_ALIGNMENT, false);
  //set uniform shader program
  const uMat = gl.getUniformLocation(shaderProgram, "u_proj");
  gl.uniformMatrix4fv(uMat, false, [
    2.0 / canvas.width, 0.0, 0.0, 0.0, 
    0.0, 2.0 / canvas.height, 0.0, 0.0,
    0.0, 0.0, -0.01, 0.0,
    -1.0, -1.0, 0.0, 1.0
  ]);
  const u_tex = gl.getUniformLocation(shaderProgram, "u_texture");
  gl.uniform1i(u_tex, 0);
  //enable vertices attribute in shader program
  const a_pos = gl.getAttribLocation(shaderProgram, "a_position");
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosition);
  gl.vertexAttribPointer(a_pos, 2, gl.FLOAT, false, 2 * Float32Array.BYTES_PER_ELEMENTS, 0);
  gl.enableVertexAttribArray(a_pos);
  const a_tc = gl.getAttribLocation(shaderProgram, "a_texCoord");
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoord);
  gl.vertexAttribPointer(a_tc, 2, gl.FLOAT, true, 2 * Float32Array.BYTES_PER_ELEMENTS, 0);
  gl.enableVertexAttribArray(a_tc);
  const a_clr = gl.getAttribLocation(shaderProgram, "a_color");
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColor);
  gl.vertexAttribPointer(a_clr, 4, gl.UNSIGNED_BYTE, true, 4 * Uint8Array.BYTES_PER_ELEMENTS, 0);
  gl.enableVertexAttribArray(a_clr);
  // done bind
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  const render = function (delta) {
    gl.clearColor(0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    gl.drawElements(gl.TRIANGLES, 18, gl.UNSIGNED_BYTE, 0);
  }
  render(0);
  //requestAnimationFrame(render); 
  window.addEventListener('beforeunload', function () {
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);

    gl.deleteBuffer(vertexPosition);
    gl.deleteBuffer(vertexCoord);
    gl.deleteBuffer(vertexColor);
    gl.deleteBuffer(indexBuffer);
  });

  plog.innerHTML = "complete webgl initialization";
} catch (err) {
  plog.innerHTML = err;
}
</script>
