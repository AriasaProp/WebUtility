<style type="text/css">
  img {
    display: none;
  }
</style>

<script type="text/javascript" defer>
document.addEventListener("DOMContentLoaded", function () {
  const canvas = document.getElementById("game-canvas");
  const plog = document.getElementById("log");
  try {
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
  
    const vertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      10.0, 10.0, 0xff00ffff,
      240.0, 10.0, 0xff00ffff,
      10.0, 710.0, 0xff00ffff,
      240.0, 710.0, 0xff00ffff,
  
      250.0, 10.0, 0xff00ffff,
      960.0, 10.0, 0xff00ffff,
      250.0, 710.0, 0xff00ffff,
      960.0, 710.0, 0xff00ffff,
  
      970.0, 10.0, 0xff00ffff,
      1270.0, 10.0, 0xff00ffff,
      970.0, 710.0, 0xff00ffff,
      1270.0, 710.0, 0xff00ffff,
    ]), gl.STATIC_DRAW);
  
    const indexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
      new Uint8Array([
        0, 1, 2, 2, 1, 3,
        4, 5, 6, 6, 5, 7,
        8, 9, 10, 10, 9, 11
      ]), gl.STATIC_DRAW);
  
    const shaderProgram = gl.createProgram();
    const vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, `
      precision mediump float;
      
      uniform mat4 u_proj;
      attribute vec4 a_position;
      attribute vec4 a_color;
      varying vec4 v_color;
      void main(void) {
        gl_Position = u_proj * a_position;
        v_color = a_color;
      }
    `);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))
      throw "vertex shader: " + gl.getShaderInfoLog(vertexShader);
    gl.attachShader(shaderProgram, vertexShader);
    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, `
      precision mediump float;
      
      varying vec4 v_color;
      void main(void) {
        gl_FragColor = v_color;
      }
    `);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))
      throw "fragment shader: " +  gl.getShaderInfoLog(fragmentShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
      throw "link shader program: " + gl.getProgramInfoLog(shaderProgram);
    gl.validateProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.VALIDATE_STATUS))
      throw "validate shader program: " + gl.getProgramInfoLog(shaderProgram);
  
    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);
  
    gl.useProgram(shaderProgram);
  
    const uMat = gl.getUniformLocation(shaderProgram, "u_proj");
    gl.uniformMatrix4fv(uMat, false, [
      2.0 / canvas.width, 0.0, 0.0, 0.0,
      0.0, 2.0 / canvas.height, 0.0, 0.0,
      0.0, 0.0, -0.01, 0.0,
      -1.0, -1.0, 0.0, 1.0
    ]);
    const a_pos = gl.getAttribLocation(shaderProgram, "a_position");
    gl.vertexAttribPointer(a_pos, 2, gl.FLOAT, gl.FALSE, 3 * Float32Array.BYTES_PER_ELEMENTS, 0);
    gl.enableVertexAttribArray(a_pos);
    /*
 */
    const a_clr = gl.getAttribLocation(shaderProgram, "a_color");
    gl.vertexAttribPointer(a_clr, 4, gl.UNSIGNED_BYTE, gl.TRUE, 3 * Float32Array.BYTES_PER_ELEMENTS, 2 * Float32Array.BYTES_PER_ELEMENTS);
    gl.enableVertexAttribArray(a_clr);
 
    const render = function (delta) {
      gl.clearColor(0.0, 0.0, 0.0, 1.0);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  
      gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
    }
    requestAnimationFrame(render); 
    window.addEventListener('beforeunload', function () {
      gl.bindBuffer(gl.ARRAY_BUFFER, null);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
  
      gl.deleteBuffer(vertexBuffer);
      gl.deleteBuffer(indexBuffer);
    });
    plog.innerHTML = "complete webgl initialization";
  } catch (err) {
    plog.innerHTML = err;
  }
});
</script>

<img id="foods" src="/img/foods/foods.png"/>